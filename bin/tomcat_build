#!/bin/bash

function tomcat_build() {

  cfg_temp_dir=${env[cfg_temp_dir]}
	cmd_job_name=${env[cmd_job_name]}
	opt_build_tool=${env[opt_build_tool]}
	opt_build_cmds=${env[opt_build_cmds]}
	opt_java_opts=${env[opt_java_opts]}
	tmp_dockerfile=${env[tmp_dockerfile]}
	cfg_harbor_address=${env[cfg_harbor_address]}
	cfg_harbor_project=${env[cfg_harbor_project]}
	tmp_docker_image_suffix=${env[tmp_docker_image_suffix]}

	module_path=`find $cfg_temp_dir/* -type d  -name  ${cmd_job_name}`
        if test -z "$module_path"; then module_path=$cfg_temp_dir; fi

	case "$opt_build_tool"  in
	gradle)
		check_env_by_cmd_v gradle
		info "开始使用gradle构建项目"
		#构建代码
		if test -n "$opt_build_cmds" ;then
			cd $module_path && $opt_build_cmds
        	else
			cd $module_path && gradle -x test clean build
        	fi
		env[tmp_build_dist_path]=$module_path/build/libs
	 ;;
	maven)
		check_env_by_cmd_v mvn
		info "开始使用maven构建项目"
		 #构建代码
                if test -n "$opt_build_cmds" ;then
			cd $module_path && ${opt_build_cmds}
		else
			cd $module_path && mvn clean -Dmaven.test.skip=true  compile package -U -am
		fi
		env[tmp_build_dist_path]=$module_path/target
       	#to do
	 ;;
	*) warn "java project only support gradle or maven build"; exit 1; ;;
    	esac


	info "开始java项目镜像的构建"

	# 查找jar包名
	cd ${env[tmp_build_dist_path]}
	jar_name=`ls | grep -v 'source'| grep ${cmd_job_name}`

	# 构建镜像
	image_path=${cmd_job_name}_${tmp_docker_image_suffix}:latest
	if test ${env[cfg_enable_harbor]} -eq 1;
	then
	   image_path=$cfg_harbor_address/$cfg_harbor_project/$image_path
  fi

	docker build --build-arg java_opts="$opt_java_opts"\
	       --build-arg tomcat_deploy_path=$cmd_job_name\
	       -t $image_path -f $tmp_dockerfile ${env[tmp_build_dist_path]}

  #推送镜像
	docker_push $image_path

}

