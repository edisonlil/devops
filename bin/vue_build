#!/bin/bash

source ./docker_helper.sh


function vue_build() {
  cfg_temp_dir=${env[cfg_temp_dir]}
  cmd_job_name=${env[cmd_job_name]}
	opt_build_cmds=${env[opt_build_cmds]}
	opt_build_env=${env[opt_build_env]}
	cfg_harbor_address=${env[cfg_harbor_address]}
	cfg_harbor_project=${env[cfg_harbor_project]}
	tmp_dockerfile=${env[tmp_dockerfile]}
	tmp_docker_image_suffix=${env[tmp_docker_image_suffix]}

	check_env_by_cmd_v npm
	info "开始使用node构建vue项目"
    module_path=`find $cfg_temp_dir/* -type d  -name  ${cmd_job_name}`
    if test -z "$module_path"; then module_path=$cfg_temp_dir; fi
	if test -n "$opt_build_cmds" ;then
		cd $module_path &&  npm --unsafe-perm install && $opt_build_cmds
	else
		if test -n "$opt_build_env" ;then
			cd $module_path && npm --unsafe-perm install && npm run build:$opt_build_env
		else
			cd $module_path && npm --unsafe-perm install && npm run build
		fi
	fi

	env[tmp_build_dist_path]=$module_path/dist

    info "开始vue项目镜像的构建"
	cd ${env[tmp_build_dist_path]}
	tar -cf dist.tar *


	# 构建镜像
	image_path=${cmd_job_name}_${tmp_docker_image_suffix}:latest
	if test ${env[cfg_enable_harbor]} -eq 1;
	then
	   image_path=$cfg_harbor_address/$cfg_harbor_project/$image_path
  fi
	docker build -t $image_path -f  $tmp_dockerfile  ${env[tmp_build_dist_path]}

  #推送镜像
	docker_push $image_path

}

